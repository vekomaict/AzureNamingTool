@page "/adminlog"
@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using System.IO
@using BlazorDownloadFile
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@inject ILogger<Configuration> Logger
@inject IJSRuntime JsRuntime
@inject IConfiguration _config
@inject StateContainer state
@inject ProtectedSessionStorage session
@inject IToastService toastService
@implements IDisposable
@inject NavigationManager NavigationManager

<PageTitle>Azure Naming Tool - Admin Log</PageTitle>
<div class="card  @theme!.ThemeStyle">
    <div class="card-body">
        <div style="float:left;">
            <h1>
                Admin Log
            </h1>
        </div>
        <div style="float:right;">
            <button class="btn btn-secondary" title="Instructions" @onclick="@(e => ModalHelper.ShowInformationModal(Modal!, theme, "bg-navcolor", "Admin Log", String.Empty, "adminloginstructions", admin))">
                <span class="oi oi-document" aria-hidden="true"></span> Documentation
            </button>
        </div>
        <div style="clear:both;"></div>
        <div class="mb-3">This page displays a log of Admin/Configuration changes.</div>


        @if (!dataLoaded)
        {
            <div class="spinner-border blue" role="status">
                <span class="sr-only"></span>
            </div>
        }
        else
        {
            <div>
                @if (lstAdminLogMessages.Count > 0)
                {
                    <div class="mb-3">
                        <button class="btn btn-primary" title="Export Admin Log" @onclick="@(e => OnExportLogClick())">
                            Export Admin Log
                        </button>
                        @if (currentuser == "GlobalAdmin")
                        {
                            <button class="btn btn-danger mx-1" title="Purge Admin Log" @onclick="@(e => OnPurgeLogClick())">
                                Purge Admin Log
                            </button>
                        }
                    </div>
                    <div class="card mb-3">
                        <div class="card-header bg-default text-dark">
                            <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#filter" role="button" aria-expanded="false" aria-controls="filter">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Filter Data
                            </a>
                        </div>
                        <div class="collapse show card card-body @theme.ThemeStyle" id="filter">
                            <div class="form-group row mb-3">
                                <div style="width:auto;">
                                    <input class="form-control" type="date" style="width: 150px;" @bind="startdate" @bind:event="oninput" />
                                </div>
                                <div style="width:auto;padding-top:7px;">
                                    to
                                </div>
                                <div style="width:auto;">
                                    <input class="form-control" type="date" style="width: 150px;" @bind="enddate" @bind:event="oninput" />
                                </div>
                            </div>
                            <div class="form-group row mb-3">
                                <div class="input-group flex-nowrap">
                                    <div class="input-group flex-nowrap">
                                        <span class="input-group-text" id="addon-wrapping">
                                            <span class="oi oi-magnifying-glass" id="addon-wrapping"></span>
                                        </span>
                                        <input class="form-control" type="search" placeholder="Filter by Source, Title, Message"
                                        @bind="filterData"
                                        @bind:event="oninput">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <div>
                                    <button class="btn btn-success" title="Reset" @onclick="@(e => OnResetClick())">
                                        Reset
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table @theme.ThemeStyle">
                            <thead>
                                <tr>
                                    <th scope="col">Created On</th>
                                    <th scope="col">Source</th>
                                    <th scope="col">Title</th>
                                    <th scope="col">Message</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (AdminLogMessage message in lstAdminLogMessages)
                                {
                                    if (!IsVisible(message))
                                        continue;
                                    <tr>
                                        <td class="align-top">
                                            @message.CreatedOn.ToString()
                                        </td>
                                        <td class="align-top">
                                            @message.Source
                                        </td>
                                        <td class="align-top">
                                            @message.Title
                                        </td>
                                        <td class="align-top">
                                            @message.Message
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p style="font-style:italic">
                        There are no log items to display.
                    </p>
                }
            </div>
        }
    </div>
</div>

@code {

    [CascadingParameter]
    protected ThemeInfo? theme { get; set; }
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    private bool admin = false;
    private bool dataLoaded = false;
    List<AdminLogMessage> lstAdminLogMessages = new();
    public string filterData { get; set; } = String.Empty;
    public DateTime startdate { get; set; } = DateTime.Today.AddDays(-30);
    public DateTime enddate { get; set; } = DateTime.Today;
    private string currentuser = String.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        currentuser = await IdentityHelper.GetCurrentUser(session);
        if (firstRender)
        {
            var result = await session.GetAsync<bool>("admin");
            admin = (bool)result.Value;
            if (!admin)
            {
                NavigationManager.NavigateTo("/");
            }
            ServiceResponse serviceResponse = new();
            serviceResponse = await AdminLogService.GetItems();
            if (serviceResponse.Success)
            {
                if (GeneralHelper.IsNotNull(serviceResponse.ResponseObject))
                {
                    lstAdminLogMessages = (List<AdminLogMessage>)serviceResponse.ResponseObject!;
                }
            }

            dataLoaded = true;
            StateHasChanged();
        }
    }

    private void OnInstructionsClick()
    {
        NavigationManager.NavigateTo("/instructions");
    }


    public void Dispose()
    {
        StateHasChanged();
    }

    private async Task OnPurgeLogClick()
    {
        ServiceResponse serviceResponse = new();
        bool confirm = false;
        confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will purge the Admin Log and cannot be undone!</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme!);
        if (confirm)
        {
            await LogHelper.PurgeAdminLog();
            toastService.ShowSuccess("Admin Log purged!");
            AdminLogService.PostItem(new AdminLogMessage() { Source = currentuser, Title = "INFORMATION", Message = "Admin Log purged." });
            CacheHelper.InvalidateCacheObject("AdminLogMessage");
            serviceResponse = await AdminLogService.GetItems();
            if (serviceResponse.Success)
            {
                if (GeneralHelper.IsNotNull(serviceResponse.ResponseObject))
                {
                    lstAdminLogMessages = (List<AdminLogMessage>)serviceResponse.ResponseObject!;
                }
            }
            dataLoaded = true;
            StateHasChanged();
        }
    }

    private async Task OnExportLogClick()
    {
        await JsRuntime.InvokeVoidAsync("htmlToCSV", "adminlog.csv");
    }

    public bool IsVisible(AdminLogMessage message)
    {
        bool visible = true;
        if (message.CreatedOn < startdate)
            visible = false;

        if (message.CreatedOn > (enddate + new TimeSpan(23, 59, 59)))
            visible = false;

        if (!string.IsNullOrEmpty(filterData))
        {
            if ((!message.Source.Contains(filterData, StringComparison.OrdinalIgnoreCase)) && (!message.Title.Contains(filterData, StringComparison.OrdinalIgnoreCase)) && (!message.Message.Contains(filterData, StringComparison.OrdinalIgnoreCase)))
                visible = false;
        }
        return visible;
    }

    private void OnResetClick()
    {
        startdate = DateTime.Today.AddDays(-30);
        enddate = DateTime.Today;
        filterData = "";
    }
}
