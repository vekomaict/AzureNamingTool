@using AzureNamingTool.Helpers
@using AzureNamingTool.Models;
@inject StateContainer state
@inject ProtectedSessionStorage session
@inject IToastService toastService
@inject ILogger<PasswordModal> Logger

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog modal-danger">
        <div class="modal-content @state.AppTheme">
            <div class="modal-body">
                <div class="card">
                    <div class="card-header bg-danger text-white">
                        <h3>Global Admin Password Not Set!</h3>
                    </div>
                    <div class="card-body">
                        <p>
                            You must set the Global Admin Password to continue.
                        </p>
                        <p><span class="fw-bold">Requirements</span></p>
                        <ul>
                            <li>Contain a number</li>
                            <li>Contain one upper case letter</li>
                            <li>Be at least 8 characters</li>
                        </ul>
                        <div>
                            <input id="newpassword" class="form-control mb-3" type="password" @onchange="@((ui) => { SetPassword((string?)ui.Value!);})" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" disabled="@disabled" class="btn btn-primary" @onclick=@ModalSave>Save</button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool disabled = true;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private string password = String.Empty;

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task ModalSave()
    {
        if (!String.IsNullOrEmpty(password))
        {
            // Make sure password is complex enough
            if (ValidationHelper.ValidatePassword(password))
            {
                var config = ConfigurationHelper.GetConfigurationData();

                config.AdminPassword = GeneralHelper.EncryptString(password, config.SALTKey!);
                Guid guid = Guid.NewGuid();
                config.APIKey = GeneralHelper.EncryptString(guid.ToString(), config.SALTKey!);
                guid = Guid.NewGuid();
                config.ReadOnlyAPIKey = GeneralHelper.EncryptString(guid.ToString(), config.SALTKey!);

                await ConfigurationHelper.UpdateSettings(config);

                state.Password = true;
                await session.SetAsync("password", true);

                state.SetAdmin(true);
                await session.SetAsync("admin", true);
                await session.SetAsync("currentuser", "GlobalAdmin");

                await InvokeAsync(() =>
                {
                    base.StateHasChanged();
                });

                await OnClose.InvokeAsync(true);
                toastService.ShowSuccess("The Global Admin Password has been set.");
            }
            else
            {
                disabled = true;
            }
        }
        else
        {
            disabled = true;
        }
    }

    private void SetPassword(string value)
    {
        password = value;

        // Validate the password complexity
        if (ValidationHelper.ValidatePassword(password))
        {
            disabled = false;
        }
        else
        {
            disabled = true;
        }
    }
}